#!/usr/bin/env bash

set -eo pipefail

# Tools for managing draft, prerelease and actual Github release data

source .github/scripts/tag-search
fetch_latest_tag_names

_update_tag() {
  local tag=$1

  echo "Current git HEAD:"
  echo "----"
  git log -n 1
  echo "----"
  echo "Setting tag '$tag' to current HEAD ..."
  git tag -f "$tag"
  git push -f origin "$tag"
}

_promote_draft_to_prerelease() {
  echo "Promote draft '$LATEST_DRAFT_TAG' to release candidate ..."
  old_changelog=$(hub release show -f '%b' $LATEST_DRAFT_TAG)

  hub release edit --draft=false --prerelease=true \
    -m "$LATEST_DRAFT_TAG (test)" -m "$old_changelog" "$LATEST_DRAFT_TAG"
  _update_tag "$LATEST_DRAFT_TAG"
}

_merge_draft_to_prerelease() {
  local draft_tag=$LATEST_DRAFT_TAG
  local prerel_tag=$LATEST_RC_PREREL_TAG
  echo "Merge draft '$draft_tag' to '$prerel_tag' ..."
  draft_changelog=$(hub release show -f '%b' "$draft_tag")
  prerel_changelog=$(hub release show -f '%b' "$prerel_tag")

  changelog=(
    "$prerel_changelog"
    $'\n'
    "> Changelog from merged draft release '$draft_tag'. Manual edit needed!"
    $'\n'
    "$draft_changelog"
  )

  hub release edit --prerelease=true \
  -m "$prerel_tag (test)" -m "${changelog[*]}" "$prerel_tag"

  echo "Deleting merged '$draft_tag' draft release ..."
  hub release delete "$draft_tag"
}

_promote_prerelease_to_release() {
  local prerel_tag=$1
  local release_tag=$2
  local changelog
  changelog=$(hub release show -f '%b' "$prerel_tag")

  echo "Creating a release '$release_tag' from '$prerel_tag' ..."
  hub release create -m "$release_tag" -m "$changelog" "$release_tag"
  _update_tag "$release_tag"

  echo "Deleting prerelease '$prerel_tag' ..."
  hub release delete "$prerel_tag"
}

_is_last_change_from_dev() {
  local version=$1
  # XXX(lassi) I'm sure there can be better ways to detect when dev is merged
  # to rc in a way that draft release contents should/can be moved to prerelease.
  #
  # This could also be out of sync if dev changes are pushed while this is running,
  # but that should be rare. And in worst case changelog is missing something
  # that has to be manually added later.
  git log -n 1 | \
  grep -C 20 "Merge pull request" | \
  grep -C 20 "/dev" | \
  grep "$version"
}

_next_draft_version() {
  local cur_ver=$1

  if [[ $cur_ver =~ v([[:digit:]]+).([[:digit:]]+) ]]; then
    echo "v${BASH_REMATCH[1]}.$(( ${BASH_REMATCH[2]} + 1 ))-rc"
  else
    echo "Could not parse version numbers from '$cur_ver'"
    exit 1
  fi
}

_log_changelog() {
  echo "Changelog contents:"
  echo "-----"
  echo "$1"
  echo "-----"
}

update_draft() {
  local prev_tag
  if [[ -n $LATEST_HOTFIX_PREREL_TAG ]]; then
    prev_tag=$LATEST_HOTFIX_PREREL_TAG
  elif [[ -n $LATEST_RC_PREREL_TAG ]]; then
    prev_tag=$LATEST_RC_PREREL_TAG
  else
    prev_tag=$LATEST_RELEASE_TAG
  fi

  if [[ -z $prev_tag ]]; then
    echo "Could not find any previous Github release! Can't proceed on draft creation."
    exit 1
  fi

  local changelog;
  echo "Gathering changelog from pull requests, revision range '${prev_tag}..HEAD' ..."
  changelog=$(.github/scripts/changelog "$prev_tag" HEAD)
  _log_changelog "$changelog"

  local draft_tag=$LATEST_DRAFT_TAG
  if [[ -z $draft_tag ]]; then
    draft_tag=$(_next_draft_version "$prev_tag")
    echo "Current draft release does not exist, next version is '$draft_tag'"
  else
    echo "Current draft release exists, deleting it (because https://github.com/github/hub/issues/1817) ..."
    hub release delete "$draft_tag"
  fi
  echo "Creating draft release '$draft_tag' ..."
  hub release create --draft=true -m "$draft_tag (dev)" -m "$changelog" "$draft_tag"
}

update_prerelease() {
  if [[ -z $LATEST_DRAFT_TAG && -z $LATEST_RC_PREREL_TAG ]]; then
    echo "Could not find either draft or prerelease status Github release! Can't do anything sane."
  elif [[ -z $LATEST_RC_PREREL_TAG ]]; then
    _promote_draft_to_prerelease
  else
    if _is_last_change_from_dev "$LATEST_DRAFT_TAG"; then
      _merge_draft_to_prerelease
    else
      echo "Updating prerelease from change directly to rc branch ..."

      local prerel_tag=$LATEST_RC_PREREL_TAG
      local changelog
      echo "Gathering changelog from pull requests, revision range '${prerel_tag}..HEAD' ..."
      changelog=$(.github/scripts/changelog "${prerel_tag}" HEAD)
      _log_changelog "$changelog"

      old_changelog=$(hub release show -f '%b' "$prerel_tag")

      local lines=(
        "$old_changelog"
        $'\n'
        '> Rc was changed from non dev-branch merge, check changelog contents!'
        $'\n'
        "$changelog"
      )
      echo "Editing prerelease '$prerel_tag' ..."
      hub release edit --prerelease=true \
        -m "$prerel_tag (test)" -m "${lines[*]}" "$prerel_tag"
      _update_tag "$prerel_tag"
    fi
  fi
}

update_hotfix_prerelease() {
  if [[ -z $LATEST_RELEASE_TAG ]]; then
    echo "ERROR: Could not find latest release! Can't proceed with hotfix."
    exit 1
  fi

  local changelog
  echo "Gathering changelog from pull requests, revision range '${LATEST_RELEASE_TAG}..HEAD' ..."
  changelog=$(.github/scripts/changelog "${LATEST_RELEASE_TAG}" HEAD)
  _log_changelog "$changelog"

  local hotfix_tag=$LATEST_HOTFIX_PREREL_TAG
  if [[ -z $hotfix_tag ]]; then
    hotfix_tag="${LATEST_RELEASE_TAG}-hotfix-$(date +%F)-rc"

    echo "Creating new hotfix prerelease '$hotfix_tag' ..."
    hub release create --prerelease=true -m "$hotfix_tag (test)" -m "$changelog" "$hotfix_tag"
  else
    echo "Updating hotfix prerelease '$hotfix_tag' ..."
    hub release edit --prerelease=true -m "$hotfix_tag (test)" -m "$changelog" "$hotfix_tag"
  fi
  _update_tag "$hotfix_tag"
}

release_new_version() {
  if [[ -z $LATEST_RC_PREREL_TAG && -z $LATEST_HOTFIX_PREREL_TAG ]]; then
    echo "ERROR: Could not find prerelease to release!"
    exit 1
  elif [[ -n $LATEST_HOTFIX_PREREL_TAG ]]; then
    _promote_prerelease_to_release "$LATEST_HOTFIX_PREREL_TAG" "${LATEST_HOTFIX_PREREL_TAG/-rc*/}"
  else
    _promote_prerelease_to_release "$LATEST_RC_PREREL_TAG" "${LATEST_RC_PREREL_TAG/-rc*/}"
  fi
}

"$@"
