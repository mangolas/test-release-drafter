#!/usr/bin/env bash

set -eo pipefail

# Tools for managing draft, prerelease and actual Github release data

source .github/scripts/tag-search
fetch_latest_tag_names

_promote_draft_to_prerelease() {
  echo "Promote draft '$LATEST_DRAFT_TAG' to release candidate ..."
  changelog=$(hub release show -f '%b' $LATEST_DRAFT_TAG)

  hub release edit --draft=false --prerelease=true \
    -m "$LATEST_DRAFT_TAG (rc)" -m "$changelog" "$LATEST_DRAFT_TAG"
}

_merge_draft_to_prerelease() {
  echo "Merge draft '$LATEST_DRAFT_TAG' to '$LATEST_PREREL_TAG' ..."
  draft_changelog=$(hub release show -f '%b' $LATEST_DRAFT_TAG)

  changelog_addition=(
    $'\n'
    "[Changelog below from draft '$LATEST_DRAFT_TAG', merge manually to above]"
    $'\n'
    "$draft_changelog"
  )
  _update_prerelease_tag "${changelog_addition[*]}"
  echo "Deleting merged '$LATEST_DRAFT_TAG' draft release ..."
  hub release delete "$LATEST_DRAFT_TAG"
}

_promote_prerelease_to_release() {
  local release_tag=${LATEST_PREREL_TAG/-rc*/}
  echo "Creating a release '$release_tag' from '$LATEST_PREREL_TAG' ..."
  changelog=$(hub release show -f '%b' $LATEST_PREREL_TAG)

  hub release create -m "$release_tag" -m "$changelog" "$release_tag"
  echo "Deleting released prerelease '$LATEST_PREREL_TAG' ..."
  hub release delete "$LATEST_PREREL_TAG"
}

_update_prerelease_tag() {
  local additional_msg=${1:-}
  local release_tag=${LATEST_PREREL_TAG/-rc*/}
  local rc_num=${LATEST_PREREL_TAG/*-rc-/}
  if [[ -z $rc_num ]]; then
    echo "ERROR: Could not extract release candidate count from tag '$LATEST_PREREL_TAG'!"
    exit 1
  fi
  local prerelease_tag="${release_tag}-rc-$(($rc_num + 1))"
  echo "Creating new prerelease from '$LATEST_PREREL_TAG' to '$prerelease_tag' ..."
  changelog=$(hub release show -f '%b' $LATEST_PREREL_TAG)

  hub release create --prerelease=true \
    -m "$prerelease_tag (rc)" -m "$changelog" -m "$additional_msg" \
    "$prerelease_tag"
  echo "Deleting previous prerelease '$LATEST_PREREL_TAG' ..."
  hub release delete "$LATEST_PREREL_TAG"
}

_is_last_change_from_dev() {
  local version=$1
  # XXX(lassi) I'm sure there can be better ways to detect when dev is merged
  # to rc in a way that draft release contents should/can be moved to prerelease.
  #
  # This could also be out of sync if dev changes are pushed while this is running,
  # but that should be rare. And in worst case changelog is missing something
  # that has to be manually added later.
  git log -n 1 | \
  grep -C 20 "Merge pull request" | \
  grep -C 20 "/dev" | \
  grep "$version"
}

update_prerelease() {
  if [[ -z $LATEST_DRAFT_TAG && -z $LATEST_PREREL_TAG ]]; then
    echo "Could not find either draft or prerelease status Github release! Can't do anything sane."
  elif [[ -z $LATEST_PREREL_TAG ]]; then
    _promote_draft_to_prerelease
  else
    if _is_last_change_from_dev "$LATEST_DRAFT_TAG"; then
      _merge_draft_to_prerelease
    else
      echo "Updating prerelease from change directly to rc branch ..."
      _update_prerelease_tag \
        $'\nRc was changed from non dev-branch merge, update changelog manually!'
    fi
  fi
}

release_new_version() {
  if [[ -z $LATEST_PREREL_TAG ]]; then
    echo "ERROR: Could not find rc Github release! Can't proceed with release!"
    exit 1
  else
    _promote_prerelease_to_release
  fi
}

"$@"
