#!/usr/bin/env bash

set -eo pipefail

# Tools for managing draft, prerelease and actual Github release data

source .github/scripts/tag-search
fetch_latest_tag_names

_promote_draft_to_prerelease() {
  echo "Promote draft '$LATEST_DRAFT_TAG' to release candidate ..."
  changelog=$(hub release show -f '%b' $LATEST_DRAFT_TAG)

  hub release edit --draft=false --prerelease=true \
    -m "$LATEST_DRAFT_TAG (rc)" -m "$changelog" "$LATEST_DRAFT_TAG"
}

_merge_draft_to_prerelease() {
  echo "Merge draft '$LATEST_DRAFT_TAG' to '$LATEST_PREREL_TAG' ..."
  draft_changelog=$(hub release show -f '%b' $LATEST_DRAFT_TAG)
  prerel_changelog=$(hub release show -f '%b' $LATEST_PREREL_TAG)

  echo hub release edit --draft=false --prerelease=true \
    -m "$LATEST_PREREL_TAG (rc)" \
    -m "$prerel_changelog" \
    -m "[Changelog from draft '$LATEST_DRAFT_TAG', merge manually to above]" \
    -m "$draft_changelog" \
    "$LATEST_PREREL_TAG"
  echo "Deleting merged '$LATEST_DRAFT_TAG' draft release ..."
  echo hub release delete "$LATEST_DRAFT_TAG"
}

_promote_prerelease_to_release() {
  echo "Creating a release '$LATEST_PREREL_TAG' ..."
  changelog=$(hub release show -f '%b' $LATEST_PREREL_TAG)

  hub release edit --prerelease=false \
    -m "$LATEST_PREREL_TAG" -m "$changelog" "$LATEST_PREREL_TAG"
}

_update_pre_release_tag() {
  echo "Current pre-release found. Advancing tag '$LATEST_PREREL_TAG' to rc HEAD ..."
  echo git tag -f "$LATEST_PREREL_TAG"
  echo git push -f origin "$LATEST_PREREL_TAG"
}

_is_last_change_from_dev() {
  last_non_merge_commit=$(git --no-pager log --no-merges -n 1 --pretty=format:"%h")
  #
  # The logic is that if last non merge commit exists in dev, it most likely
  # means that current dev has been merged (as this is run on rc branch).
  #
  # XXX(lassi) I'm sure there can be better ways to detect when dev is merged
  # to rc in a way that draft release contents should be moved to prerelease.
  # This could also be out of sync if dev changes are pushed while this is running,
  # but that should be rare. And in worst case changelog is missing something
  # that has to be manually added later.
  git --no-pager branch -r --contains $last_non_merge_commit | grep 'origin/dev'
}

update_prerelease() {
  if [[ -z $LATEST_DRAFT_TAG && -z $LATEST_PREREL_TAG ]]; then
    echo "Could not find either dev or rc Github release! Can't do anything sane."
  elif [[ -z $LATEST_PREREL_TAG ]]; then
    _promote_draft_to_prerelease
  else
    if _is_last_change_from_dev; then
      _merge_draft_to_prerelease
    else
      echo "Last push to rc did not originate from dev!"
      echo "Changelog will not reflect changes automatically!"
    fi
    _update_pre_release_tag
  fi
}

release_new_version() {
  if [[ -z $LATEST_PREREL_TAG ]]; then
    echo "ERROR: Could not find rc Github release! Can't proceed with release!"
    exit 1
  else
    _promote_prerelease_to_release
  fi
}

"$@"
