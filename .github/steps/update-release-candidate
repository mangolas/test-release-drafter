#!/usr/bin/env bash

set -eo pipefail

set -x
# Tries to keep dev and rc draft release information in order
#

# Limiting release search to first 20 releses, documentation does not say clearly that results are shown by
# creation order latest first, but that seems to be the case. There anyway should only be one/zero meaningful
# draft release and one/zero pre-release on the fly in the top hits.

releases=$(
  hub release --include-drafts -L 20 \
    -f '{"tag": "%T", "type":"%S", "created":"%ct"}%n'
)

latest_dev_tag=$(
  echo "$releases" |
  jq -s -r '
    map(select(.type=="draft")) |
    sort_by(.created) | reverse | first | .tag // empty
  '
)

latest_rc_tag=$(
  echo "$releases" |
  jq -s -r '
    map(select(.type=="pre-release")) |
    sort_by(.created) | reverse | first | .tag // empty
  '
)

promote_dev_to_rc() {
  echo "Promote draft '$latest_dev_tag' to release candidate ..."
  changelog=$(hub release show -f '%b' $latest_dev_tag)

  hub release edit --draft=false --prerelease \
    -m "$latest_dev_tag (rc)" -m "$changelog" "$latest_dev_tag}"
}

# A two drafts version, which won't work
#promote_dev_to_rc() {
#  if [[ $latest_dev_tag =~ (v[0-9]*\.)([0-9]*) ]]; then
#    new_minor=$((${BASH_REMATCH[2]} + 1))
#    new_dev_id="${BASH_REMATCH[1]}${new_minor}-dev"
#  else
#    echo "ERROR: Release tag '$latest_dev_tag' is not following form 'v<major num>.<minor num>"
#    exit 1
#  fi
#
#  echo "Promote '$latest_dev_tag' to new draft release '$new_rc_id'"
#  changelog=$(hub release show -f '%b' $latest_dev_tag)
#
#  new_rc_id=${latest_dev_tag//-dev/-rc}
#  echo "Creating new draft release '$new_rc_id' ..."
#  hub release create -d -m "$new_rc_id" -m "$changelog" "$new_rc_id"
#
#  echo "Creating new draft release '$new_dev_id' ..."
#  hub release create -d -m "$new_dev_id" "$new_dev_id"
#
#  echo "Deleting the previous dev draft release '$latest_dev_tag' ..."
#  hub release delete "$latest_dev_tag"
#}

update_rc() {
  echo "Current pre-release found. Changing tag '$latest_rc_tag' to rc HEAD ..."
  # TODO When we know that we should append dev release stuff to ongoing rc?
}

echo "Latest dev release id: $latest_dev_tag"
echo "Latest rc release id: $latest_rc_tag"

if [[ -z $latest_dev_tag && -z $latest_rc_tag ]]; then
  echo "Could not find either dev or rc Github release! Can't do anything sane."
elif [[ -z $latest_rc_tag ]]; then
  promote_dev_to_rc
else
  update_rc
fi
